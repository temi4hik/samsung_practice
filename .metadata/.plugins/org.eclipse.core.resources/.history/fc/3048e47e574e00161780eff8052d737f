function getFeed(){
	var FEED_URL = "http://www.3dnews.ru/news/rss/";
	var width = screen.width;
	var i = 0;
	var arr = [];
	
	$(document).ready(function(){
		$.ajax({
			type: "GET",
			url: FEED_URL,
			dataType: "xml",
			error: getStorage(function(res){
				for(var field in res){
					for (var fieldValue in (value = res[field])){
						
						switch (fieldValue){
						case 'title':
							var title = value[fieldValue];
							break;
						case 'description':
							var description = value[fieldValue];
							break;
						case 'url_img':
							var url_img = value[fieldValue];
							break;					
						}
					}
					
					$("#rssContent").append('<div class="feed">	<div class="images">'+
							'<img src=' + url_img +' width=' + width + 'px /></div>'+
							'<div class="title">'+ title +'</div>'+
							'<div class="description">'+ description +'</div></div>');
					
				}
			}),
			success: xmlParser			
		});
		
	});
	
	

	function xmlParser(xml){
		
		clearStorage();
		
		$(xml).find("item").each(function(){

			var url_img = $(this).find("enclosure").attr('url');
			
			$("#rssContent").append('<div class="feed">'+
					'<div class="title"><h2>'+ $(this).find("title").text() +'</h2></div>'+
					'<div class="images">'+ '<img src=' + url_img +' width=' + width + 'px /></div>' + 
					'<div class="description">'+ $(this).find("description").text() +'</div></div><br>');
			$("#rssContent").append('<hr>');
			
			arr[i]= {url_img:$(this).find("enclosure").attr('url'), title:$(this).find("title").text(), description:$(this).find("description").text()};
			setData(arr[i]);
			i++;
		});
		
	}
}



var indexedDB 	  = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB,
IDBTransaction  = window.IDBTransaction || window.webkitIDBTransaction || window.msIDBTransaction,
baseName 	  = "filesBase",
storeName 	  = "filesStore";



function logerr(err){
	console.log(err);
}

function connectDB(f){
	var request = indexedDB.open(baseName, 1);
	request.onerror = logerr;
	request.onsuccess = function(){
		f(request.result);
	}
	request.onupgradeneeded = function(e){
		var objectStore = e.currentTarget.result.createObjectStore(storeName, { autoIncrement: true });
		connectDB(f);
	}
}

function getData(key, f){
	connectDB(function(db){
		var request = db.transaction([storeName], "readonly").objectStore(storeName).get(key);
		request.onerror = logerr;
		request.onsuccess = function(){
			f(request.result ? request.result : -1);
		}
	});
}

function getStorage(f){
	connectDB(function(db){
		var rows = [],
			store = db.transaction([storeName], "readonly").objectStore(storeName);

		if(store.mozGetAll)
			store.mozGetAll().onsuccess = function(e){
				f(e.target.result);
			};
		else
			store.openCursor().onsuccess = function(e) {
				var cursor = e.target.result;
				if(cursor){
					rows.push(cursor.value);
					cursor.continue();
				}
				else {
					f(rows);
				}
			};
	});
}

function saveImage(imgUrl) {
	
	var getImageFile = function () {
        // Create XHR
        var xhr = new XMLHttpRequest(),
            blob;

        xhr.open("GET", imgUrl, true);
        // Set the responseType to blob
        xhr.responseType = "blob";

        xhr.addEventListener("load", function () {
            if (xhr.status === 200) {
                console.log("Image retrieved");
                
                // Blob as response
                blob = xhr.response;
                console.log("Blob:" + blob);

                // Put the received blob into IndexedDB
                putElephantInDb(blob);
            }
        }, false);
        // Send XHR
        xhr.send();
    }; 
    var convertToBase64 = function(blob, cb) {
        var fr = new FileReader();
        fr.onload = function(e) {
            cb(e.target.result);
        }
        fr.readAsDataURL(blob);
    };
    var dataURLToBlob = function(dataURL) {
        var BASE64_MARKER = ';base64,';
        if (dataURL.indexOf(BASE64_MARKER) == -1) {
          var parts = dataURL.split(',');
          var contentType = parts[0].split(':')[1];
          var raw = parts[1];

          return new Blob([raw], {type: contentType});
        }

        var parts = dataURL.split(BASE64_MARKER);
        var contentType = parts[0].split(':')[1];
        var raw = window.atob(parts[1]);
        var rawLength = raw.length;

        var uInt8Array = new Uint8Array(rawLength);

        for (var i = 0; i < rawLength; ++i) {
          uInt8Array[i] = raw.charCodeAt(i);
        }

        return new Blob([uInt8Array], {type: contentType});
    };
    
    
    var putImageInDb = function (blob) {
        console.log("Putting elephants in IndexedDB");

        // Put the blob into the dabase
        if (browserName == 'Chrome') {
            // Chrome can't store blobs at the moment.
            // Convert to base64.
            convertToBase64(blob, continuation);
        } else {
            continuation(blob);
        }

        function continuation(blob) {
            // Open a transaction to the database
            var transaction = db.transaction(["rss"], 'readwrite');
            var put = transaction.objectStore("elephants").put(blob, "image");

            // Retrieve the file that was just stored
            transaction.objectStore("elephants").get("image").onsuccess = function (event) {
                var imgFile = event.target.result;
                console.log("Got elephant! " + imgFile);

                // we've received our image from the database.  Convert it back to
                // a blob if it is not a blob already.
                if (browserName == 'Chrome') {
                    // Why conver to a blob instead of using the data url?
                    // because data URLs are huge and contain the entire image int he url.
                    // If you reference the same image multiple times 
                    // with a data url you essentially
                    // end up with multiple copies of your image floating around.
                    // dataUrls also take up JS heap space.
                    imgFile = dataURLToBlob(imgFile);
                }

                // Get window.URL object
                var URL = window.URL || window.webkitURL;

                // Create and revoke ObjectURL
                var imgURL = URL.createObjectURL(imgFile);

                // Set img src to ObjectURL
                var imgElephant = document.getElementById("elephant");
                imgElephant.setAttribute("src", imgURL);

                // localStorage.setItem('img', imgURL);
                // window.open('blank.html');
                // Revoking ObjectURL
                URL.revokeObjectURL(imgURL);

            };
        }
    };
	
	connectDB(function(db){
		
	});
}

function setData(obj){
	connectDB(function(db){
		var request = db.transaction([storeName], "readwrite").objectStore(storeName).add(obj);
		request.onerror = logerr;
		request.onsuccess = function(){
			return request.result;
		}
	});
}

function delData(key){
	connectDB(function(db){
		var request = db.transaction([storeName], "readwrite").objectStore(storeName).delete(key);
		request.onerror = logerr;
		request.onsuccess = function(){
			console.log("File delete from DB:", file);
		}
	});
}

function clearStorage(){
	connectDB(function(db){
		var request = db.transaction([storeName], "readwrite").objectStore(storeName).clear();
		request.onerror = logerr;
		request.onsuccess = function(){
			console.log("Clear");
		}
	});
}


